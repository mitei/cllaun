print("--- Config: {APP_DIR}/.cllaun");

global.cllaun = {};
cllaun.parse = (function() {
    const REGEX = /(?:"(?:\\"|[^"])*")|(?:\\ |[^ "])+/g;
    return function(cmd) {
        return cmd.match(REGEX).map(function(v) {
            return v.replace(/\\"/g, '"').replace(/\\ /g, ' ');
        });
    };
}());
cllaun.getCompletions = function(incomp) {
    var compl = [];
    cllaun.rules.filter(function(v) {
        return incomp.match(v.rule) != '';
    }).forEach(function(v) {
        compl = compl.concat(v.complement(incomp));
    });
    return compl;
};
cllaun.execute = function(cmd, args) {
    for (var i = 0; i < cllaun.rules.length; ++i) {
        var v = cllaun.rules[i];
        if (cmd.match(v.rule)) {
            v.execute(cmd, args);
            break;
        }
    }
};
cllaun.rules = [
{
    type: 'executable',
    rule: /[\w-\.]+/,
    complement: function(cmd) {
        var list = [];
        global.sys.execute.paths.forEach(function(v) {
            var dir = new Dir(v);
            list = list.concat(dir.entryList([cmd + '*'], Dir.Files|Dir.Executable));
        });
        return list;
    },
    execute: function(cmd, args) {
        global.sys.execute(cmd, args);
    }
}
];

global.window = new Window();
window.id = "window";
window.frameLess = window.staysOnTop = window.translucentBackground = true;
global.commandLine = new LineEdit(window);
commandLine.id = "commandLine";
global.listView = new StringListView(window);
listView.id = "listView";

window.resize(1000, 1000);
window.move(300, 300);
window.show();
listView.move(16, 52);
listView.hide();

// Skin-api test
skin.read("test_skin");

// Global-Shortcut-api test
shortcut['Ctrl+Alt+Space'] = function() {
    window.show();
};

// (Widget-)Shortcut-api test
commandLine.shortcut['Esc'] = function() {
    window.hide();
}
commandLine.shortcut['Tab'] = function() {
    listView.setFocus();
    listView.index = 0;
};
listView.shortcut['Tab'] = function() {
    listView.index++;
};
listView.shortcut['Shift+Tab'] = function() {
    listView.index--;
};
listView.activated.connect(listView, function(i) {
    var cmd = parser.parse(commandLine.text);
    var subcmd = parser.parse(commandLine.text.substr(0, commandLine.cursorPosition));
    var newcmd = [cmd.name].concat(cmd.args);
    newcmd[subcmd.args.length] = this.data[i];
    commandLine.text = newcmd.join(' ');
    commandLine.setFocus();
    listView.hide();
});
listView.shortcut['Esc'] = listView.shortcut['Backspace'] = function() {
    commandLine.setFocus();
    listView.hide();
};

// Plugin-command test
cllaun.commands = {};
cllaun.aliases = {};
cllaun.commands['eval'] = function(args) {
    eval(args);
};
cllaun.commands['execute'] = function(args) {
    print(args);
    sys.execute(args);
};

cllaun.commands['open'] = function(args) {
    print(args);
    sys.open(args);
};

cllaun.commands['exit'] = function() {
    sys.exit(0);
};
cllaun.aliases['!'] = ':eval';
cllaun.aliases['quit'] = ':exit';

// signal-slot test
commandLine.returnPressed.connect(commandLine, function() {
    this.selectAll();
    window.hide();
    var cmd = parser.parse(this.text);
    cllaun.execute(cmd.shift(), cmd);
});
commandLine.textChanged.connect(commandLine, function() {
    var cmd = this.text;
    if (cmd == '') return listView.hide();
    var tokens = cllaun.parse(cmd.substr(0, this.cursorPosition));
    var candidates = cllaun.getCompletions(tokens[tokens.length-1]);
    listView.data = candidates;
    if (candidates.length == 0) {
        listView.hide();
    } else {
        listView.show();
    }
});

// Plugin-api test
plugin.importAll();

print("--- /Config: {APP_DIR}/.cllaun");
