print("--- Config: {APP_DIR}/.cllaun");

global.cllaun = {};
cllaun.parse = (function() {
    const REGEX = /(?:"(?:\\"|[^"])*")|(?:\\ |[^ "])+/g;
    return function(cmd) {
        return cmd.match(REGEX).map(function(v) {
            return v.replace(/\\"/g, '"').replace(/\\ /g, ' ');
        });
    };
}());
cllaun.getCompletions = function(incomp) {
    var compl = [];
    var matches = cllaun.rules.filter(function(v) {
        return incomp.match(v.rule) != null;
    });
    (matches.length > 0 ? matches : cllaun.rules).forEach(function(v) {
        compl = compl.concat(v.complement(incomp));
    });
    return compl;
};
cllaun.execute = function(cmd, args) {
    var matches = cllaun.rules.filter(function(v) {
        return cmd.match(v.rule) != null;
    });
    var a = matches.length > 0 ? matches : cllaun.rules;
    for (var i = 0; i < a.length; ++i) {
        var o = a[i];
        print(o.type + ' : ' + cmd + ' : ' + args.toString());
        if (o.execute(cmd, args)) return;
    }
};

cllaun.rules = [
{
    type: 'executable',
    rule: /![\w-.]*/,
    complement: function(cmd) {
        if (cmd.match(/!.*/)) cmd = cmd.substr(1, cmd.length - 1);
        var list = [];
        global.sys.execute.paths.forEach(function(v) {
            var dir = new Dir(v);
            list = list.concat(dir.entryList([cmd + '*'], Dir.Files|Dir.Executable));
        });
        return list;
    },
    execute: function(cmd, args) {
        if (cmd.match(/!.*/)) cmd = cmd.substr(1, cmd.length - 1);
        return sys.execute(cmd, args);
    }
},
{
    type: 'alias',
    rule: /\?.*/,
    complement: function(cmd) {
        if (cmd.match(/\?.*/)) cmd = cmd.substr(1, cmd.length - 1);
        var list = [];
        for (var k in cllaun.aliases) {
            var m = k.match(new RegExp('^' + cmd + '.*'));
            if (m) list[list.length] = '?' + m;
        }
        return list;
    },
    execute: function(cmd, args) {
        if (cmd.match(/\?.*/)) cmd = cmd.substr(1, cmd.length - 1);
        var f = cllaun.aliases[cmd];
        if (f) {
            cllaun.execute(f, args); return true;
        } else {
            return false;
        }
    }
},
{
    type: 'plugin',
    rule: /:[\w-]+/,
    complement: function(cmd) {
        if (cmd.match(/:.*/)) cmd = cmd.substr(1, cmd.length - 1);
        var list = [];
        for (var k in cllaun.commands) {
            var m = k.match(new RegExp('^' + cmd + '.*'));
            if (m) list[list.length] = ':' + m;
        }
        return list;
    },
    execute: function(cmd, args) {
        if (cmd.match(/:.*/)) cmd = cmd.substr(1, cmd.length - 1);
        var f = cllaun.commands[cmd];
        if (f) {
            f(args); return true;
        } else {
            return false;
        }
    }
},
{
    type: 'path',
    rule: /(?:.*[\\\/].*)/,
    complement: function(p) {
        var r = /(.+)[\/\\]([^\/\\]*)$/;
        var res = r.exec(p);
        if (res) {
            var d = new Dir(res[1]),
                f = res[2];
            var ent = d.entryList([f + '*'], Dir.AllEntries|Dir.NoDotAndDotDot|Dir.Hidden, Dir.DirsLast);
            return ent.map(function(e) {
                return res[1].replace(/([^\\]) /, '$1\\ ') + '/' + e.replace(/([^\\]) /, '$1\\ ');
            });
        }
        return [];
    },
    execute: function(p) {
        return sys.open(p);
    }
}
];

global.window = new Window();
window.id = "window";
window.frameLess = window.staysOnTop = window.translucentBackground = true;
global.commandLine = new LineEdit(window);
commandLine.id = "commandLine";
global.listView = new StringListView(window);
listView.id = "listView";

window.resize(1000, 1000);
window.move(300, 300);
window.show();
listView.move(16, 52);
listView.hide();

// Skin-api test
skin.read("test_skin");

// Global-Shortcut-api test
shortcut['Ctrl+Alt+Space'] = function() {
    window.show();
};

// (Widget-)Shortcut-api test
commandLine.shortcut['Esc'] = function() {
    window.hide();
}
commandLine.shortcut['Tab'] = function() {
    listView.setFocus();
    listView.index = 0;
};
listView.shortcut['Tab'] = function() {
    listView.index++;
};
listView.shortcut['Shift+Tab'] = function() {
    listView.index--;
};
listView.activated.connect(listView, function(i) {
    var cmd = cllaun.parse(commandLine.text);
    var subcmd = cllaun.parse(commandLine.text.substr(0, commandLine.cursorPosition));
    cmd[subcmd.length -1] = this.data[i];
    commandLine.text = cmd.join(' ');
    commandLine.setFocus();
    commandLine.cursorPosition = commandLine.text.length;
    listView.hide();
});
listView.shortcut['Esc'] = listView.shortcut['Backspace'] = function() {
    commandLine.setFocus();
    listView.hide();
};

// Plugin-command test
cllaun.commands = {};
cllaun.aliases = {};
cllaun.commands['eval'] = function(args) {
    eval(args);
};
cllaun.commands['execute'] = function(args) {
    sys.execute(args);
};

cllaun.commands['open'] = function(args) {
    sys.open(args);
};

cllaun.commands['exit'] = function() {
    sys.exit(0);
};
cllaun.aliases['quit'] = ':exit';

// signal-slot test
commandLine.returnPressed.connect(commandLine, function() {
    this.selectAll();
    window.hide();
    var cmd = cllaun.parse(this.text);
    cllaun.execute(cmd.shift(), cmd);
});
commandLine.textChanged.connect(commandLine, function() {
    var cmd = this.text;
    if (cmd == '') return listView.hide();
    var tokens = cllaun.parse(cmd.substr(0, this.cursorPosition));
    var candidates = cllaun.getCompletions(tokens[tokens.length-1]);
    listView.data = candidates;
    if (candidates.length == 0) {
        listView.hide();
    } else {
        listView.show();
    }
});

// Plugin-api test
plugin.importAll();

print("--- /Config: {APP_DIR}/.cllaun");
